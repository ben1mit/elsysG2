{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11760\viewh11740\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Hvordan mappestrukturen fungerer:\
\
Alt som skal p\'e5 enheten som sitter p\'e5 vingen skal inn i mappa main_project. \
\

\f1\b I mappa main_project s\'e5 skal det v\'e6re minst fire ting:
\f0\b0 \
- En mappe som heter main. Det er i denne vi legger scriptet som syr alt sammen. \
- En mappe som heter components. I denne skal alle headerfiler og ting vi inkluderer i prosjektet ligge.\
- En fil som heter CMakeLists.txt. Denne CMakelisten har ansvar for \'e5 gi informasjonen om hvordan hele prosjektet skal kompileres, og har et unikt innhold som ikke likner p\'e5 de andre CMakeListene inni main og components. \
-et vscode workspace. Dette er ikke en fil som er n\'f8dvendig for at noe skal fungere. Den er bare til for \'e5 gj\'f8re det enkelt \'e5 \'e5pne hele prosjektet i vscode, noe du gj\'f8r ved \'e5 dobbeltklikke p\'e5 den. \
\

\f1\b I tillegg skal det v\'e6re noen ting vi ikke har laget selv i denne mappa:\

\f0\b0 -En mappe som heter build. Det er i denne mappa at resultatet av kopileringen v\'e5r legges, og den lages automatisk n\'e5r man kompilerer prosjektet.\
-En fil som heter sdkconfig. Denne lages automatisk n\'e5r du kompilerer prosjektet. Den er en fil du ikke skal endre manuelt, og den er til for at du skal kunne ha en meny i terminalen hvor du kan sette noen innstillinger.\
-en usynlig mappe som heter .vscode. Den lages automatisk og den er bare til for at vsscode skal oppf\'f8re seg som vi vil. Denne skal vi ikke endre p\'e5 eller bry oss om. 
\f1\b \

\f0\b0 \

\f1\b I mappa main skal det v\'e6re to ting:
\f0\b0 \
-en fil som heter main.c, navnet er viktig. Om den heter noe annet s\'e5 er det mer jobb for oss, fordi det at den heter main gj\'f8r at kompilatoren forst\'e5r at dette er hovedfilen v\'e5r, og setter opp innstillinger automatisk for oss. \
-en CMakeLists.txt, denne har ansvar for \'e5 gi informasjon bare om hvordan vi vil at filen main skal kompileres, og er s\'e5 og si identisk med Cmakelistene i components.\
\
I mappa components sola det kun v\'e6re en mappe for hver av komponentene vi \'f8nsker \'e5 inkludere. Dette inkluderer mapper for hver headerfil vi har skrevet selv.\
\

\f1\b I hver av komponentenes mapper s\'e5 skal det v\'e6re minst tre ting:
\f0\b0 \
-en .c fil, som inneholder selve kildekoden til komponenten\
-en cmakelist, disse er veldig like for hver av komponentene, det eneste som alltid m\'e5 forandres i disse listene er navnet p\'e5 component_src, som skal tilsvare navnet p\'e5 .c filen. Det kan ogs\'e5 hende at man m\'e5 forandre component_priv_requires, som skal inneholde navnet p\'e5 de komponentene du #include-r i c-filen.  \
-en mappe som heter include. I denne mappa skal du ha en .h fil \
\

\f1\b For \'e5 lage en ny komponent:
\f0\b0 \
-Kopier innholdet i en komponent vi har skrevet selv, for eksempel my_mpu_wrapper. (Alts\'e5 kopier hele innholdet den ytterste mappa med det navnet). \
-legg innholdet i en mappe med navnet du \'f8nsker at komponenten din skal ha, og legg den mappa inni mappa components.\
-bytt ut .c og .h filen med dine egene filer\
-endre Cmakelists inni prosjektmappa di slik beskrevet i avsnittet over. (Om du ikke har en #include av noen av komponentene i komponentmappa i din .c eller .h fil skal feltet component_priv_requires v\'e6re tomt). Det viktigste her er at component_srcs er satt til navnet p\'e5 .c filen.  }